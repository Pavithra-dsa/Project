def topologicalSortUtil(v, adj, visited, stack):
    # current node as visited
    visited[v] = True

    # adjacent vertices
    for i in adj[v]:
        if not visited[i]:
            topologicalSortUtil(i, adj, visited, stack)

    # Push current vertex to stack
    stack.append(v)


#  Topological Sort
def topologicalSort(adj, V):
    # Stack 
    stack = []

    visited = [False] * V

    # Call the recursive 
    for i in range(V):
        if not visited[i]:
            topologicalSortUtil(i, adj, visited, stack)

    # Print
    print("Topological sorting of the graph:", end=" ")
    while stack:
        print(stack.pop(), end=" ")


# Main code
if __name__ == "_main_":
    # Number of nodes
    V = 4

    # Edges
    edges = [[0, 1], [1, 2], [3, 1], [3, 2]]

    # An adjacency list
    adj = [[] for _ in range(V)]

    for i in edges:
        adj[i[0]].append(i[1])

    topologicalSort(adj, V)